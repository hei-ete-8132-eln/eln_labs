--
-- VHDL Architecture COR.cordic.masterVersion
--
-- Created:
--          by - silvan.zahno.UNKNOWN (WE6996)
--          at - 14:34:27 11.09.2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2018.1 (Build 12)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;
LIBRARY gates;
  USE gates.gates.all;

LIBRARY COR;
LIBRARY operators;

ARCHITECTURE masterVersion OF cordic IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL phase0     : signed(phaseBitNb-1 DOWNTO 0);
   SIGNAL phase1     : signed(phaseBitNb-1 DOWNTO 0);
   SIGNAL phase2     : signed(phaseBitNb-1 DOWNTO 0);
   SIGNAL phase3     : signed(phaseBitNb-1 DOWNTO 0);
   SIGNAL phase4     : signed(phaseBitNb-1 DOWNTO 0);
   SIGNAL phase5     : signed(phaseBitNb-1 DOWNTO 0);
   SIGNAL phase6     : signed(phaseBitNb-1 DOWNTO 0);
   SIGNAL phase7     : signed(phaseBitNb-1 DOWNTO 0);
   SIGNAL phase8     : signed(phaseBitNb-1 DOWNTO 0);
   SIGNAL phase9     : signed(phaseBitNb-1 DOWNTO 0);
   SIGNAL stepAngle0 : signed(phaseBitNb-1 DOWNTO 0);
   SIGNAL stepAngle1 : signed(phaseBitNb-1 DOWNTO 0);
   SIGNAL stepAngle2 : signed(phaseBitNb-1 DOWNTO 0);
   SIGNAL stepAngle3 : signed(phaseBitNb-1 DOWNTO 0);
   SIGNAL stepAngle4 : signed(phaseBitNb-1 DOWNTO 0);
   SIGNAL stepAngle5 : signed(phaseBitNb-1 DOWNTO 0);
   SIGNAL stepAngle6 : signed(phaseBitNb-1 DOWNTO 0);
   SIGNAL stepAngle7 : signed(phaseBitNb-1 DOWNTO 0);
   SIGNAL stepAngle8 : signed(phaseBitNb-1 DOWNTO 0);
   SIGNAL stepAngle9 : signed(phaseBitNb-1 DOWNTO 0);
   SIGNAL x0         : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL x1         : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL x10        : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL x1Shifted  : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL x2         : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL x2Shifted  : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL x3         : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL x3Shifted  : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL x4         : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL x4Shifted  : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL x5         : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL x5Shifted  : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL x6         : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL x6Shifted  : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL x7         : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL x7Shifted  : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL x8         : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL x8Shifted  : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL x9         : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL x9Shifted  : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL y0         : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL y1         : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL y10        : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL y1Shifted  : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL y2         : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL y2Shifted  : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL y3         : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL y3Shifted  : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL y4         : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL y4Shifted  : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL y5         : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL y5Shifted  : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL y6         : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL y6Shifted  : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL y7         : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL y7Shifted  : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL y8         : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL y8Shifted  : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL y9         : unsigned(sineBitNb-1-1 DOWNTO 0);
   SIGNAL y9Shifted  : unsigned(sineBitNb-1-1 DOWNTO 0);


   -- Component Declarations
   COMPONENT cordicAddSub
   GENERIC (
      phaseBitNb : positive := 16;
      sineBitNb  : positive := 16
   );
   PORT (
      phaseIn    : IN     signed (phaseBitNb-1 DOWNTO 0);
      stepAngle  : IN     signed (phaseBitNb-1 DOWNTO 0);
      xIn        : IN     unsigned (sineBitNb-1-1 DOWNTO 0);
      xInShifted : IN     unsigned (sineBitNb-1-1 DOWNTO 0);
      yIn        : IN     unsigned (sineBitNb-1-1 DOWNTO 0);
      yInShifted : IN     unsigned (sineBitNb-1-1 DOWNTO 0);
      phaseOut   : OUT    signed (phaseBitNb-1 DOWNTO 0);
      xOut       : OUT    unsigned (sineBitNb-1-1 DOWNTO 0);
      yOut       : OUT    unsigned (sineBitNb-1-1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT cordicQuadrants
   GENERIC (
      phaseBitNb : positive := 16;
      sineBitNb  : positive := 16
   );
   PORT (
      phaseHigh : IN     unsigned (1 DOWNTO 0);
      x         : IN     unsigned (sineBitNb-1-1 DOWNTO 0);
      y         : IN     unsigned (sineBitNb-1-1 DOWNTO 0);
      cosine    : OUT    signed (sineBitNb-1 DOWNTO 0);
      sine      : OUT    signed (sineBitNb-1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT cordicShifter
   GENERIC (
      sineBitNb  : positive := 16;
      shiftBitNb : positive := 1
   );
   PORT (
      xIn      : IN     unsigned (sineBitNb-1-1 DOWNTO 0);
      yIn      : IN     unsigned (sineBitNb-1-1 DOWNTO 0);
      xShifted : OUT    unsigned (sineBitNb-1-1 DOWNTO 0);
      yShifted : OUT    unsigned (sineBitNb-1-1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT cordicStepAngles
   GENERIC (
      phaseBitNb : positive := 16
   );
   PORT (
      stepAngle0 : OUT    signed (phaseBitNb-1 DOWNTO 0);
      stepAngle1 : OUT    signed (phaseBitNb-1 DOWNTO 0);
      stepAngle2 : OUT    signed (phaseBitNb-1 DOWNTO 0);
      stepAngle3 : OUT    signed (phaseBitNb-1 DOWNTO 0);
      stepAngle4 : OUT    signed (phaseBitNb-1 DOWNTO 0);
      stepAngle5 : OUT    signed (phaseBitNb-1 DOWNTO 0);
      stepAngle6 : OUT    signed (phaseBitNb-1 DOWNTO 0);
      stepAngle7 : OUT    signed (phaseBitNb-1 DOWNTO 0);
      stepAngle8 : OUT    signed (phaseBitNb-1 DOWNTO 0);
      stepAngle9 : OUT    signed (phaseBitNb-1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT shiftRightUnsigned
   GENERIC (
      dataBitNb  : positive := 8;
      shiftBitNb : positive := 1;
      delay      : time     := gateDelay
   );
   PORT (
      shIn  : IN     unsigned (dataBitNb-1 DOWNTO 0);
      shOut : OUT    unsigned (dataBitNb-1 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : cordicAddSub USE ENTITY COR.cordicAddSub;
   FOR ALL : cordicQuadrants USE ENTITY COR.cordicQuadrants;
   FOR ALL : cordicShifter USE ENTITY COR.cordicShifter;
   FOR ALL : cordicStepAngles USE ENTITY COR.cordicStepAngles;
   FOR ALL : shiftRightUnsigned USE ENTITY operators.shiftRightUnsigned;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   x0 <= to_unsigned(integer(0.6071*2.0**(x0'length-1)), x0'length);
   y0 <= (others => '0');
   

   -- HDL Embedded Text Block 2 eb2
   phase0 <= signed("00" & phase(phase'high-2 downto 0));
   
   --phase0 <= signed("00" & phase(phase'high-2 downto 0)) when phase(phase'high-1) = '0'
   --  else -signed("00" & (phase(phase'high-2 downto 0)));


   -- Instance port mappings.
   I_cor0 : cordicAddSub
      GENERIC MAP (
         phaseBitNb => phaseBitNb,
         sineBitNb  => sineBitNb
      )
      PORT MAP (
         phaseIn    => phase0,
         stepAngle  => stepAngle0,
         xIn        => x0,
         xInShifted => x0,
         yIn        => y0,
         yInShifted => y0,
         phaseOut   => phase1,
         xOut       => x1,
         yOut       => y1
      );
   I_cor1 : cordicAddSub
      GENERIC MAP (
         phaseBitNb => phaseBitNb,
         sineBitNb  => sineBitNb
      )
      PORT MAP (
         phaseIn    => phase1,
         stepAngle  => stepAngle1,
         xIn        => x1,
         xInShifted => x1Shifted,
         yIn        => y1,
         yInShifted => y1Shifted,
         phaseOut   => phase2,
         xOut       => x2,
         yOut       => y2
      );
   I_cor2 : cordicAddSub
      GENERIC MAP (
         phaseBitNb => phaseBitNb,
         sineBitNb  => sineBitNb
      )
      PORT MAP (
         phaseIn    => phase2,
         stepAngle  => stepAngle2,
         xIn        => x2,
         xInShifted => x2Shifted,
         yIn        => y2,
         yInShifted => y2Shifted,
         phaseOut   => phase3,
         xOut       => x3,
         yOut       => y3
      );
   I_cor3 : cordicAddSub
      GENERIC MAP (
         phaseBitNb => phaseBitNb,
         sineBitNb  => sineBitNb
      )
      PORT MAP (
         phaseIn    => phase3,
         stepAngle  => stepAngle3,
         xIn        => x3,
         xInShifted => x3Shifted,
         yIn        => y3,
         yInShifted => y3Shifted,
         phaseOut   => phase4,
         xOut       => x4,
         yOut       => y4
      );
   I_cor4 : cordicAddSub
      GENERIC MAP (
         phaseBitNb => phaseBitNb,
         sineBitNb  => sineBitNb
      )
      PORT MAP (
         phaseIn    => phase4,
         stepAngle  => stepAngle4,
         xIn        => x4,
         xInShifted => x4Shifted,
         yIn        => y4,
         yInShifted => y4Shifted,
         phaseOut   => phase5,
         xOut       => x5,
         yOut       => y5
      );
   I_cor5 : cordicAddSub
      GENERIC MAP (
         phaseBitNb => phaseBitNb,
         sineBitNb  => sineBitNb
      )
      PORT MAP (
         phaseIn    => phase5,
         stepAngle  => stepAngle5,
         xIn        => x5,
         xInShifted => x5Shifted,
         yIn        => y5,
         yInShifted => y5Shifted,
         phaseOut   => phase6,
         xOut       => x6,
         yOut       => y6
      );
   I_cor6 : cordicAddSub
      GENERIC MAP (
         phaseBitNb => phaseBitNb,
         sineBitNb  => sineBitNb
      )
      PORT MAP (
         phaseIn    => phase6,
         stepAngle  => stepAngle6,
         xIn        => x6,
         xInShifted => x6Shifted,
         yIn        => y6,
         yInShifted => y6Shifted,
         phaseOut   => phase7,
         xOut       => x7,
         yOut       => y7
      );
   I_cor7 : cordicAddSub
      GENERIC MAP (
         phaseBitNb => phaseBitNb,
         sineBitNb  => sineBitNb
      )
      PORT MAP (
         phaseIn    => phase7,
         stepAngle  => stepAngle7,
         xIn        => x7,
         xInShifted => x7Shifted,
         yIn        => y7,
         yInShifted => y7Shifted,
         phaseOut   => phase8,
         xOut       => x8,
         yOut       => y8
      );
   I_cor8 : cordicAddSub
      GENERIC MAP (
         phaseBitNb => phaseBitNb,
         sineBitNb  => sineBitNb
      )
      PORT MAP (
         phaseIn    => phase8,
         stepAngle  => stepAngle8,
         xIn        => x8,
         xInShifted => x8Shifted,
         yIn        => y8,
         yInShifted => y8Shifted,
         phaseOut   => phase9,
         xOut       => x9,
         yOut       => y9
      );
   I_cor9 : cordicAddSub
      GENERIC MAP (
         phaseBitNb => phaseBitNb,
         sineBitNb  => sineBitNb
      )
      PORT MAP (
         phaseIn    => phase9,
         stepAngle  => stepAngle9,
         xIn        => x9,
         xInShifted => x9Shifted,
         yIn        => y9,
         yInShifted => y9Shifted,
         phaseOut   => OPEN,
         xOut       => x10,
         yOut       => y10
      );
   U_10 : cordicQuadrants
      GENERIC MAP (
         phaseBitNb => phaseBitNb,
         sineBitNb  => sineBitNb
      )
      PORT MAP (
         phaseHigh => phase(phaseBitNb-1 DOWNTO phaseBitNb-2),
         x         => x10,
         y         => y10,
         cosine    => cosine,
         sine      => sine
      );
   I_shr3 : cordicShifter
      GENERIC MAP (
         sineBitNb  => sineBitNb,
         shiftBitNb => 3
      )
      PORT MAP (
         xIn      => x3,
         yIn      => y3,
         xShifted => x3Shifted,
         yShifted => y3Shifted
      );
   I_shr4 : cordicShifter
      GENERIC MAP (
         sineBitNb  => sineBitNb,
         shiftBitNb => 4
      )
      PORT MAP (
         xIn      => x4,
         yIn      => y4,
         xShifted => x4Shifted,
         yShifted => y4Shifted
      );
   I_shr5 : cordicShifter
      GENERIC MAP (
         sineBitNb  => sineBitNb,
         shiftBitNb => 5
      )
      PORT MAP (
         xIn      => x5,
         yIn      => y5,
         xShifted => x5Shifted,
         yShifted => y5Shifted
      );
   I_shr6 : cordicShifter
      GENERIC MAP (
         sineBitNb  => sineBitNb,
         shiftBitNb => 6
      )
      PORT MAP (
         xIn      => x6,
         yIn      => y6,
         xShifted => x6Shifted,
         yShifted => y6Shifted
      );
   I_shr7 : cordicShifter
      GENERIC MAP (
         sineBitNb  => sineBitNb,
         shiftBitNb => 7
      )
      PORT MAP (
         xIn      => x7,
         yIn      => y7,
         xShifted => x7Shifted,
         yShifted => y7Shifted
      );
   I_shr8 : cordicShifter
      GENERIC MAP (
         sineBitNb  => sineBitNb,
         shiftBitNb => 8
      )
      PORT MAP (
         xIn      => x8,
         yIn      => y8,
         xShifted => x8Shifted,
         yShifted => y8Shifted
      );
   I_shr9 : cordicShifter
      GENERIC MAP (
         sineBitNb  => sineBitNb,
         shiftBitNb => 9
      )
      PORT MAP (
         xIn      => x9,
         yIn      => y9,
         xShifted => x9Shifted,
         yShifted => y9Shifted
      );
   I_shr10 : cordicShifter
      GENERIC MAP (
         sineBitNb  => sineBitNb,
         shiftBitNb => 2
      )
      PORT MAP (
         xIn      => x2,
         yIn      => y2,
         xShifted => x2Shifted,
         yShifted => y2Shifted
      );
   U_9 : cordicStepAngles
      GENERIC MAP (
         phaseBitNb => phaseBitNb
      )
      PORT MAP (
         stepAngle0 => stepAngle0,
         stepAngle1 => stepAngle1,
         stepAngle2 => stepAngle2,
         stepAngle3 => stepAngle3,
         stepAngle4 => stepAngle4,
         stepAngle5 => stepAngle5,
         stepAngle6 => stepAngle6,
         stepAngle7 => stepAngle7,
         stepAngle8 => stepAngle8,
         stepAngle9 => stepAngle9
      );
   U_0 : shiftRightUnsigned
      GENERIC MAP (
         dataBitNb  => sineBitNb-1,
         shiftBitNb => 1,
         delay      => gateDelay
      )
      PORT MAP (
         shIn  => x1,
         shOut => x1Shifted
      );
   U_1 : shiftRightUnsigned
      GENERIC MAP (
         dataBitNb  => sineBitNb-1,
         shiftBitNb => 1,
         delay      => gateDelay
      )
      PORT MAP (
         shIn  => y1,
         shOut => y1Shifted
      );

END masterVersion;
